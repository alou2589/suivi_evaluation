security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                success_handler: App\Security\LoginSuccessHandler
                username_parameter: email
                password_parameter: password
            # by default, the feature allows 5 login attempts er minute



            logout:
                path: app_logout
                target: app_login
                # where to redirect after logout
                # target: app_any_route

            #custom_authenticator: App\Security\LoginFormAuthenticator
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/technicien, roles: ROLE_TECHNICIEN }
        # - { path: ^/point-focal-cepse, roles: ROLE_POINT_FOCAL_CEPSE }
         - { path: ^/user, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPERADMIN: ['ROLE_ADMIN', 'ROLE_INFO_ADMIN','ROLE_GESTION_ADMIN','ROLE_COMPTA_MATIERE_ADMIN', 'ROLE_RH_ADMIN', 'ROLE_PARC_AUTO_ADMIN', 'ROLE_CEPSE_ADMIN', 'ROLE_TECHNICIEN', 'ROLE_USER', 'ROLE_POINT_FOCAL_CEPSE']
        ROLE_ADMIN: ROLE_SUPERADMIN
        ROLE_INFO_ADMIN: ROLE_ADMIN
        ROLE_GESTION_ADMIN: ROLE_ADMIN
        ROLE_COMPTA_MATIERE_ADMIN: ROLE_ADMIN
        ROLE_RH_ADMIN: ROLE_ADMIN
        ROLE_PARC_AUTO_ADMIN: ROLE_ADMIN
        ROLE_CEPSE_ADMIN: ROLE_ADMIN
        ROLE_TECHNICIEN: ['ROLE_USER']
        ROLE_POINT_FOCAL_CEPSE: ['ROLE_USER']
        ROLE_USER: []


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: bcrypt
                # bcrypt and argon2i are the two algorithms supported by Symfony
                # bcrypt is the default algorithm, argon2i is more secure but requires more resources
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
